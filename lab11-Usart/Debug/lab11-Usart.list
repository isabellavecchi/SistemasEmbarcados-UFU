
lab11-Usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003364  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080034fc  080034fc  000134fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003514  08003514  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003514  08003514  00013514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800351c  0800351c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003520  08003520  00013520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000001c  08003540  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003540  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e053  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbe  00000000  00000000  0002e09f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00030060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00030d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001eb1  00000000  00000000  00031938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f39d  00000000  00000000  000337e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a2c8  00000000  00000000  00042b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cce4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e8  00000000  00000000  000ccea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080034e4 	.word	0x080034e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	080034e4 	.word	0x080034e4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <getInstant>:

void hw_delay_ms(uint32_t time_ms){
	HAL_Delay(time_ms);
}

uint32_t getInstant(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80004e0:	f000 fbb2 	bl	8000c48 <HAL_GetTick>
 80004e4:	4603      	mov	r3, r0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	bd80      	pop	{r7, pc}

080004ea <hw_cpu_sleep>:

void hw_cpu_sleep(void) {
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
//	__WFI();
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <hw_uart_tx>:

void (*usr_swt_uart_cbk)(void) = NULL;

int hw_uart_tx(unsigned char *data,
				unsigned int len,
				unsigned int timeout) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, data, len, timeout);
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	b29a      	uxth	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	68f9      	ldr	r1, [r7, #12]
 800050c:	4803      	ldr	r0, [pc, #12]	; (800051c <hw_uart_tx+0x24>)
 800050e:	f001 ff92 	bl	8002436 <HAL_UART_Transmit>
	return len;
 8000512:	68bb      	ldr	r3, [r7, #8]
}
 8000514:	4618      	mov	r0, r3
 8000516:	3710      	adds	r7, #16
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000090 	.word	0x20000090

08000520 <hw_uart_rx>:

int hw_uart_rx(unsigned char *data,
				unsigned int len,
				unsigned int timeout) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive_IT(&huart1, data, len);
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	b29b      	uxth	r3, r3
 8000530:	461a      	mov	r2, r3
 8000532:	68f9      	ldr	r1, [r7, #12]
 8000534:	4803      	ldr	r0, [pc, #12]	; (8000544 <hw_uart_rx+0x24>)
 8000536:	f002 f810 	bl	800255a <HAL_UART_Receive_IT>
	return len;
 800053a:	68bb      	ldr	r3, [r7, #8]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000090 	.word	0x20000090

08000548 <setUartCallbackFn>:

void setUartCallbackFn(void (*callback)(void)) {
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	usr_swt_uart_cbk = callback;
 8000550:	4a04      	ldr	r2, [pc, #16]	; (8000564 <setUartCallbackFn+0x1c>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	6013      	str	r3, [r2, #0]
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000038 	.word	0x20000038

08000568 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	usr_swt_uart_cbk();
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <HAL_UART_RxCpltCallback+0x18>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4798      	blx	r3
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000038 	.word	0x20000038

08000584 <deboucingTimeCapsule>:

#include "timer.h"

void (*usr_swt_cbk)(void) = NULL;

void deboucingTimeCapsule(void (*function)(void)) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	static uint32_t instant = 0;
	if (getInstant() - instant >= DEBOUNCING_TIME) {
 800058c:	f7ff ffa6 	bl	80004dc <getInstant>
 8000590:	4602      	mov	r2, r0
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <deboucingTimeCapsule+0x30>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	1ad3      	subs	r3, r2, r3
 8000598:	2b3f      	cmp	r3, #63	; 0x3f
 800059a:	d906      	bls.n	80005aa <deboucingTimeCapsule+0x26>
		instant = getInstant();
 800059c:	f7ff ff9e 	bl	80004dc <getInstant>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <deboucingTimeCapsule+0x30>)
 80005a4:	6013      	str	r3, [r2, #0]
		function();
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4798      	blx	r3
	}
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000040 	.word	0x20000040

080005b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
	if (usr_swt_cbk != NULL) {
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_GPIO_EXTI_Callback+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d004      	beq.n	80005d4 <HAL_GPIO_EXTI_Callback+0x1c>
		deboucingTimeCapsule(usr_swt_cbk);
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <HAL_GPIO_EXTI_Callback+0x24>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ffd8 	bl	8000584 <deboucingTimeCapsule>
//		if (getInstant() - instant >= DEBOUNCING_TIME) {
//			instant = getInstant();
//			usr_swt_cbk();
//		}
	}
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000003c 	.word	0x2000003c

080005e0 <setCallbackFn>:

void setCallbackFn(void (*callback)(void)) {
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	usr_swt_cbk = callback;
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <setCallbackFn+0x1c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6013      	str	r3, [r2, #0]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	2000003c 	.word	0x2000003c

08000600 <appInit>:
#include "app.h"

//volatile uint32_t led_time_ms = 128;	//para definir variaveis que podem estar sempre mudando
bool hasAppStarted = false;

void appInit(void) {
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	setCallbackFn(&appSwitchInterrupt);
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <appInit+0x1c>)
 8000606:	f7ff ffeb 	bl	80005e0 <setCallbackFn>
	setUartCallbackFn(&uart_data_received);
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <appInit+0x20>)
 800060c:	f7ff ff9c 	bl	8000548 <setUartCallbackFn>
	hasAppStarted = true;
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <appInit+0x24>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	08000635 	.word	0x08000635
 8000620:	08000651 	.word	0x08000651
 8000624:	20000044 	.word	0x20000044

08000628 <appLoop>:

void appLoop(void){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
//	ToggleLED(300);
	hw_cpu_sleep();
 800062c:	f7ff ff5d 	bl	80004ea <hw_cpu_sleep>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <appSwitchInterrupt>:
}

unsigned char tx_data[] = "Hello World\n\r";


void appSwitchInterrupt(void) {
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

	if (!hasAppStarted) {
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <appSwitchInterrupt+0x18>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	f083 0301 	eor.w	r3, r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
		return;
	}
}
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	20000044 	.word	0x20000044

08000650 <uart_data_received>:


void uart_data_received(void) {
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	//echoa o que receber
	hw_uart_tx(tx_data, 13, 300);
 8000654:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000658:	210d      	movs	r1, #13
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <uart_data_received+0x20>)
 800065c:	f7ff ff4c 	bl	80004f8 <hw_uart_tx>
	hw_uart_rx(tx_data, 13, 300);
 8000660:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000664:	210d      	movs	r1, #13
 8000666:	4802      	ldr	r0, [pc, #8]	; (8000670 <uart_data_received+0x20>)
 8000668:	f7ff ff5a 	bl	8000520 <hw_uart_rx>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000000 	.word	0x20000000

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f000 fa80 	bl	8000b7c <HAL_Init>

  /* USER CODE BEGIN Init */
  appInit();
 800067c:	f7ff ffc0 	bl	8000600 <appInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f80a 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f000 f8e8 	bl	8000858 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000688:	f000 f86e 	bl	8000768 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800068c:	f000 f8ba 	bl	8000804 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  appLoop();
 8000690:	f7ff ffca 	bl	8000628 <appLoop>
 8000694:	e7fc      	b.n	8000690 <main+0x1c>
	...

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 ff14 	bl	80034d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b27      	ldr	r3, [pc, #156]	; (8000760 <SystemClock_Config+0xc8>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a26      	ldr	r2, [pc, #152]	; (8000760 <SystemClock_Config+0xc8>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b24      	ldr	r3, [pc, #144]	; (8000760 <SystemClock_Config+0xc8>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b21      	ldr	r3, [pc, #132]	; (8000764 <SystemClock_Config+0xcc>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a20      	ldr	r2, [pc, #128]	; (8000764 <SystemClock_Config+0xcc>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <SystemClock_Config+0xcc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800070c:	2364      	movs	r3, #100	; 0x64
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000714:	2304      	movs	r3, #4
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fdf9 	bl	8001314 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 f900 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2103      	movs	r1, #3
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f85b 	bl	8001804 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000754:	f000 f8ea 	bl	800092c <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	; 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	463b      	mov	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000784:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <MX_TIM3_Init+0x94>)
 8000786:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <MX_TIM3_Init+0x98>)
 8000788:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_TIM3_Init+0x94>)
 800078c:	2263      	movs	r2, #99	; 0x63
 800078e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_TIM3_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_TIM3_Init+0x94>)
 8000798:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800079c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_TIM3_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_TIM3_Init+0x94>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007aa:	4814      	ldr	r0, [pc, #80]	; (80007fc <MX_TIM3_Init+0x94>)
 80007ac:	f001 fa0a 	bl	8001bc4 <HAL_TIM_Base_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f8b9 	bl	800092c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	4619      	mov	r1, r3
 80007c6:	480d      	ldr	r0, [pc, #52]	; (80007fc <MX_TIM3_Init+0x94>)
 80007c8:	f001 fb53 	bl	8001e72 <HAL_TIM_ConfigClockSource>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80007d2:	f000 f8ab 	bl	800092c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_TIM3_Init+0x94>)
 80007e4:	f001 fd58 	bl	8002298 <HAL_TIMEx_MasterConfigSynchronization>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80007ee:	f000 f89d 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000048 	.word	0x20000048
 8000800:	40000400 	.word	0x40000400

08000804 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_USART1_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000810:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800081e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000822:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800082c:	220c      	movs	r2, #12
 800082e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800083e:	f001 fdad 	bl	800239c <HAL_UART_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000848:	f000 f870 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000090 	.word	0x20000090
 8000854:	40011000 	.word	0x40011000

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <MX_GPIO_Init+0xc8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a2a      	ldr	r2, [pc, #168]	; (8000920 <MX_GPIO_Init+0xc8>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b28      	ldr	r3, [pc, #160]	; (8000920 <MX_GPIO_Init+0xc8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b24      	ldr	r3, [pc, #144]	; (8000920 <MX_GPIO_Init+0xc8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a23      	ldr	r2, [pc, #140]	; (8000920 <MX_GPIO_Init+0xc8>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <MX_GPIO_Init+0xc8>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <MX_GPIO_Init+0xc8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <MX_GPIO_Init+0xc8>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_GPIO_Init+0xc8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c8:	4816      	ldr	r0, [pc, #88]	; (8000924 <MX_GPIO_Init+0xcc>)
 80008ca:	f000 fcf1 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80008ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	4619      	mov	r1, r3
 80008e6:	480f      	ldr	r0, [pc, #60]	; (8000924 <MX_GPIO_Init+0xcc>)
 80008e8:	f000 fb5e 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_KEY_Pin */
  GPIO_InitStruct.Pin = USER_KEY_Pin;
 80008ec:	2301      	movs	r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_KEY_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	4619      	mov	r1, r3
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <MX_GPIO_Init+0xd0>)
 8000902:	f000 fb51 	bl	8000fa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2102      	movs	r1, #2
 800090a:	2006      	movs	r0, #6
 800090c:	f000 fa83 	bl	8000e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000910:	2006      	movs	r0, #6
 8000912:	f000 fa9c 	bl	8000e4e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000916:	bf00      	nop
 8000918:	3720      	adds	r7, #32
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40020800 	.word	0x40020800
 8000928:	40020000 	.word	0x40020000

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	e7fe      	b.n	8000934 <Error_Handler+0x8>
	...

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <HAL_MspInit+0x4c>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x4c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <HAL_TIM_Base_MspInit+0x48>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d115      	bne.n	80009c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_TIM_Base_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a0c      	ldr	r2, [pc, #48]	; (80009d4 <HAL_TIM_Base_MspInit+0x4c>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <HAL_TIM_Base_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	201d      	movs	r0, #29
 80009bc:	f000 fa2b 	bl	8000e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009c0:	201d      	movs	r0, #29
 80009c2:	f000 fa44 	bl	8000e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40000400 	.word	0x40000400
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a1d      	ldr	r2, [pc, #116]	; (8000a6c <HAL_UART_MspInit+0x94>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d134      	bne.n	8000a64 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_UART_MspInit+0x98>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <HAL_UART_MspInit+0x98>)
 8000a04:	f043 0310 	orr.w	r3, r3, #16
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <HAL_UART_MspInit+0x98>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f003 0310 	and.w	r3, r3, #16
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <HAL_UART_MspInit+0x98>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a14      	ldr	r2, [pc, #80]	; (8000a70 <HAL_UART_MspInit+0x98>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_UART_MspInit+0x98>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a44:	2307      	movs	r3, #7
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <HAL_UART_MspInit+0x9c>)
 8000a50:	f000 faaa 	bl	8000fa8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2025      	movs	r0, #37	; 0x25
 8000a5a:	f000 f9dc 	bl	8000e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a5e:	2025      	movs	r0, #37	; 0x25
 8000a60:	f000 f9f5 	bl	8000e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	; 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40011000 	.word	0x40011000
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f8ac 	bl	8000c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_KEY_Pin);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f000 fc07 	bl	80012e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <TIM3_IRQHandler+0x10>)
 8000ae2:	f001 f8be 	bl	8001c62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000048 	.word	0x20000048

08000af0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <USART1_IRQHandler+0x10>)
 8000af6:	f001 fd61 	bl	80025bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000090 	.word	0x20000090

08000b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b2e:	490e      	ldr	r1, [pc, #56]	; (8000b68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b30:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b44:	4c0b      	ldr	r4, [pc, #44]	; (8000b74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b52:	f7ff ffd7 	bl	8000b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b56:	f002 fc99 	bl	800348c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5a:	f7ff fd8b 	bl	8000674 <main>
  bx  lr    
 8000b5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b6c:	08003524 	.word	0x08003524
  ldr r2, =_sbss
 8000b70:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b74:	200000d8 	.word	0x200000d8

08000b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC_IRQHandler>
	...

08000b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <HAL_Init+0x40>)
 8000b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <HAL_Init+0x40>)
 8000b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_Init+0x40>)
 8000b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f92b 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	200f      	movs	r0, #15
 8000bac:	f000 f808 	bl	8000bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb0:	f7ff fec2 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023c00 	.word	0x40023c00

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_InitTick+0x54>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x58>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f943 	bl	8000e6a <HAL_SYSTICK_Config>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00e      	b.n	8000c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d80a      	bhi.n	8000c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f000 f90b 	bl	8000e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c00:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <HAL_InitTick+0x5c>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000010 	.word	0x20000010
 8000c18:	20000018 	.word	0x20000018
 8000c1c:	20000014 	.word	0x20000014

08000c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x20>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x24>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_IncTick+0x24>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000018 	.word	0x20000018
 8000c44:	200000d4 	.word	0x200000d4

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	200000d4 	.word	0x200000d4

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4907      	ldr	r1, [pc, #28]	; (8000cfc <__NVIC_EnableIRQ+0x38>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	; (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	; (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dcc:	d301      	bcc.n	8000dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00f      	b.n	8000df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <SysTick_Config+0x40>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f7ff ff8e 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <SysTick_Config+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <SysTick_Config+0x40>)
 8000dec:	2207      	movs	r2, #7
 8000dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff29 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e28:	f7ff ff3e 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f7ff ff8e 	bl	8000d54 <NVIC_EncodePriority>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff5d 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff31 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ffa2 	bl	8000dbc <SysTick_Config>
 8000e78:	4603      	mov	r3, r0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b084      	sub	sp, #16
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e90:	f7ff feda 	bl	8000c48 <HAL_GetTick>
 8000e94:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d008      	beq.n	8000eb4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e052      	b.n	8000f5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0216 	bic.w	r2, r2, #22
 8000ec2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	695a      	ldr	r2, [r3, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ed2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d103      	bne.n	8000ee4 <HAL_DMA_Abort+0x62>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d007      	beq.n	8000ef4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0208 	bic.w	r2, r2, #8
 8000ef2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0201 	bic.w	r2, r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f04:	e013      	b.n	8000f2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f06:	f7ff fe9f 	bl	8000c48 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b05      	cmp	r3, #5
 8000f12:	d90c      	bls.n	8000f2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2220      	movs	r2, #32
 8000f18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e015      	b.n	8000f5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1e4      	bne.n	8000f06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f40:	223f      	movs	r2, #63	; 0x3f
 8000f42:	409a      	lsls	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d004      	beq.n	8000f80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e00c      	b.n	8000f9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2205      	movs	r2, #5
 8000f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0201 	bic.w	r2, r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
 8000fc2:	e159      	b.n	8001278 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	f040 8148 	bne.w	8001272 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d005      	beq.n	8000ffa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d130      	bne.n	800105c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	091b      	lsrs	r3, r3, #4
 8001046:	f003 0201 	and.w	r2, r3, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b03      	cmp	r3, #3
 8001066:	d017      	beq.n	8001098 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d123      	bne.n	80010ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	220f      	movs	r2, #15
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	69b9      	ldr	r1, [r7, #24]
 80010e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0203 	and.w	r2, r3, #3
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80a2 	beq.w	8001272 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b57      	ldr	r3, [pc, #348]	; (8001290 <HAL_GPIO_Init+0x2e8>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	4a56      	ldr	r2, [pc, #344]	; (8001290 <HAL_GPIO_Init+0x2e8>)
 8001138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113c:	6453      	str	r3, [r2, #68]	; 0x44
 800113e:	4b54      	ldr	r3, [pc, #336]	; (8001290 <HAL_GPIO_Init+0x2e8>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800114a:	4a52      	ldr	r2, [pc, #328]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	220f      	movs	r2, #15
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a49      	ldr	r2, [pc, #292]	; (8001298 <HAL_GPIO_Init+0x2f0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d019      	beq.n	80011aa <HAL_GPIO_Init+0x202>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a48      	ldr	r2, [pc, #288]	; (800129c <HAL_GPIO_Init+0x2f4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0x1fe>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a47      	ldr	r2, [pc, #284]	; (80012a0 <HAL_GPIO_Init+0x2f8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <HAL_GPIO_Init+0x1fa>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a46      	ldr	r2, [pc, #280]	; (80012a4 <HAL_GPIO_Init+0x2fc>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d007      	beq.n	800119e <HAL_GPIO_Init+0x1f6>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a45      	ldr	r2, [pc, #276]	; (80012a8 <HAL_GPIO_Init+0x300>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_GPIO_Init+0x1f2>
 8001196:	2304      	movs	r3, #4
 8001198:	e008      	b.n	80011ac <HAL_GPIO_Init+0x204>
 800119a:	2307      	movs	r3, #7
 800119c:	e006      	b.n	80011ac <HAL_GPIO_Init+0x204>
 800119e:	2303      	movs	r3, #3
 80011a0:	e004      	b.n	80011ac <HAL_GPIO_Init+0x204>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e002      	b.n	80011ac <HAL_GPIO_Init+0x204>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <HAL_GPIO_Init+0x204>
 80011aa:	2300      	movs	r3, #0
 80011ac:	69fa      	ldr	r2, [r7, #28]
 80011ae:	f002 0203 	and.w	r2, r2, #3
 80011b2:	0092      	lsls	r2, r2, #2
 80011b4:	4093      	lsls	r3, r2
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011bc:	4935      	ldr	r1, [pc, #212]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3302      	adds	r3, #2
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ca:	4b38      	ldr	r3, [pc, #224]	; (80012ac <HAL_GPIO_Init+0x304>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ee:	4a2f      	ldr	r2, [pc, #188]	; (80012ac <HAL_GPIO_Init+0x304>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f4:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <HAL_GPIO_Init+0x304>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001218:	4a24      	ldr	r2, [pc, #144]	; (80012ac <HAL_GPIO_Init+0x304>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <HAL_GPIO_Init+0x304>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001242:	4a1a      	ldr	r2, [pc, #104]	; (80012ac <HAL_GPIO_Init+0x304>)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <HAL_GPIO_Init+0x304>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800126c:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <HAL_GPIO_Init+0x304>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3301      	adds	r3, #1
 8001276:	61fb      	str	r3, [r7, #28]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	2b0f      	cmp	r3, #15
 800127c:	f67f aea2 	bls.w	8000fc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40013800 	.word	0x40013800
 8001298:	40020000 	.word	0x40020000
 800129c:	40020400 	.word	0x40020400
 80012a0:	40020800 	.word	0x40020800
 80012a4:	40020c00 	.word	0x40020c00
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40013c00 	.word	0x40013c00

080012b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
 80012bc:	4613      	mov	r3, r2
 80012be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c0:	787b      	ldrb	r3, [r7, #1]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012cc:	e003      	b.n	80012d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	041a      	lsls	r2, r3, #16
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	619a      	str	r2, [r3, #24]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f0:	695a      	ldr	r2, [r3, #20]
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d006      	beq.n	8001308 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f958 	bl	80005b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40013c00 	.word	0x40013c00

08001314 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e267      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d075      	beq.n	800141e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001332:	4b88      	ldr	r3, [pc, #544]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b04      	cmp	r3, #4
 800133c:	d00c      	beq.n	8001358 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800133e:	4b85      	ldr	r3, [pc, #532]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001346:	2b08      	cmp	r3, #8
 8001348:	d112      	bne.n	8001370 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800134a:	4b82      	ldr	r3, [pc, #520]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001356:	d10b      	bne.n	8001370 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001358:	4b7e      	ldr	r3, [pc, #504]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d05b      	beq.n	800141c <HAL_RCC_OscConfig+0x108>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d157      	bne.n	800141c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e242      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001378:	d106      	bne.n	8001388 <HAL_RCC_OscConfig+0x74>
 800137a:	4b76      	ldr	r3, [pc, #472]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a75      	ldr	r2, [pc, #468]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e01d      	b.n	80013c4 <HAL_RCC_OscConfig+0xb0>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001390:	d10c      	bne.n	80013ac <HAL_RCC_OscConfig+0x98>
 8001392:	4b70      	ldr	r3, [pc, #448]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a6f      	ldr	r2, [pc, #444]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	4b6d      	ldr	r3, [pc, #436]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a6c      	ldr	r2, [pc, #432]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80013a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e00b      	b.n	80013c4 <HAL_RCC_OscConfig+0xb0>
 80013ac:	4b69      	ldr	r3, [pc, #420]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a68      	ldr	r2, [pc, #416]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80013b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4b66      	ldr	r3, [pc, #408]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a65      	ldr	r2, [pc, #404]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80013be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d013      	beq.n	80013f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fc3c 	bl	8000c48 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d4:	f7ff fc38 	bl	8000c48 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b64      	cmp	r3, #100	; 0x64
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e207      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	4b5b      	ldr	r3, [pc, #364]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0xc0>
 80013f2:	e014      	b.n	800141e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fc28 	bl	8000c48 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff fc24 	bl	8000c48 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	; 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e1f3      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140e:	4b51      	ldr	r3, [pc, #324]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0xe8>
 800141a:	e000      	b.n	800141e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d063      	beq.n	80014f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800142a:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00b      	beq.n	800144e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800143e:	2b08      	cmp	r3, #8
 8001440:	d11c      	bne.n	800147c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001442:	4b44      	ldr	r3, [pc, #272]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d116      	bne.n	800147c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d005      	beq.n	8001466 <HAL_RCC_OscConfig+0x152>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d001      	beq.n	8001466 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e1c7      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001466:	4b3b      	ldr	r3, [pc, #236]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4937      	ldr	r1, [pc, #220]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001476:	4313      	orrs	r3, r2
 8001478:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147a:	e03a      	b.n	80014f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d020      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001484:	4b34      	ldr	r3, [pc, #208]	; (8001558 <HAL_RCC_OscConfig+0x244>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148a:	f7ff fbdd 	bl	8000c48 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001492:	f7ff fbd9 	bl	8000c48 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e1a8      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a4:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b0:	4b28      	ldr	r3, [pc, #160]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	4925      	ldr	r1, [pc, #148]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	600b      	str	r3, [r1, #0]
 80014c4:	e015      	b.n	80014f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <HAL_RCC_OscConfig+0x244>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fbbc 	bl	8000c48 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d4:	f7ff fbb8 	bl	8000c48 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e187      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d036      	beq.n	800156c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d016      	beq.n	8001534 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_RCC_OscConfig+0x248>)
 8001508:	2201      	movs	r2, #1
 800150a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150c:	f7ff fb9c 	bl	8000c48 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001514:	f7ff fb98 	bl	8000c48 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e167      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0x200>
 8001532:	e01b      	b.n	800156c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_RCC_OscConfig+0x248>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153a:	f7ff fb85 	bl	8000c48 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001540:	e00e      	b.n	8001560 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001542:	f7ff fb81 	bl	8000c48 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d907      	bls.n	8001560 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e150      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
 8001554:	40023800 	.word	0x40023800
 8001558:	42470000 	.word	0x42470000
 800155c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001560:	4b88      	ldr	r3, [pc, #544]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1ea      	bne.n	8001542 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 8097 	beq.w	80016a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157e:	4b81      	ldr	r3, [pc, #516]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10f      	bne.n	80015aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	4b7d      	ldr	r3, [pc, #500]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a7c      	ldr	r2, [pc, #496]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
 800159a:	4b7a      	ldr	r3, [pc, #488]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015a6:	2301      	movs	r3, #1
 80015a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015aa:	4b77      	ldr	r3, [pc, #476]	; (8001788 <HAL_RCC_OscConfig+0x474>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d118      	bne.n	80015e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b6:	4b74      	ldr	r3, [pc, #464]	; (8001788 <HAL_RCC_OscConfig+0x474>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a73      	ldr	r2, [pc, #460]	; (8001788 <HAL_RCC_OscConfig+0x474>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c2:	f7ff fb41 	bl	8000c48 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ca:	f7ff fb3d 	bl	8000c48 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e10c      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015dc:	4b6a      	ldr	r3, [pc, #424]	; (8001788 <HAL_RCC_OscConfig+0x474>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x2ea>
 80015f0:	4b64      	ldr	r3, [pc, #400]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f4:	4a63      	ldr	r2, [pc, #396]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6713      	str	r3, [r2, #112]	; 0x70
 80015fc:	e01c      	b.n	8001638 <HAL_RCC_OscConfig+0x324>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b05      	cmp	r3, #5
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x30c>
 8001606:	4b5f      	ldr	r3, [pc, #380]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160a:	4a5e      	ldr	r2, [pc, #376]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6713      	str	r3, [r2, #112]	; 0x70
 8001612:	4b5c      	ldr	r3, [pc, #368]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	4a5b      	ldr	r2, [pc, #364]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6713      	str	r3, [r2, #112]	; 0x70
 800161e:	e00b      	b.n	8001638 <HAL_RCC_OscConfig+0x324>
 8001620:	4b58      	ldr	r3, [pc, #352]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001624:	4a57      	ldr	r2, [pc, #348]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	6713      	str	r3, [r2, #112]	; 0x70
 800162c:	4b55      	ldr	r3, [pc, #340]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	4a54      	ldr	r2, [pc, #336]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001632:	f023 0304 	bic.w	r3, r3, #4
 8001636:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d015      	beq.n	800166c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001640:	f7ff fb02 	bl	8000c48 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001646:	e00a      	b.n	800165e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001648:	f7ff fafe 	bl	8000c48 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	; 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e0cb      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165e:	4b49      	ldr	r3, [pc, #292]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0ee      	beq.n	8001648 <HAL_RCC_OscConfig+0x334>
 800166a:	e014      	b.n	8001696 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166c:	f7ff faec 	bl	8000c48 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001672:	e00a      	b.n	800168a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001674:	f7ff fae8 	bl	8000c48 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e0b5      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168a:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1ee      	bne.n	8001674 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001696:	7dfb      	ldrb	r3, [r7, #23]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d105      	bne.n	80016a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800169c:	4b39      	ldr	r3, [pc, #228]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	4a38      	ldr	r2, [pc, #224]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 80016a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80a1 	beq.w	80017f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016b2:	4b34      	ldr	r3, [pc, #208]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	d05c      	beq.n	8001778 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d141      	bne.n	800174a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c6:	4b31      	ldr	r3, [pc, #196]	; (800178c <HAL_RCC_OscConfig+0x478>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fabc 	bl	8000c48 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff fab8 	bl	8000c48 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e087      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e6:	4b27      	ldr	r3, [pc, #156]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69da      	ldr	r2, [r3, #28]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	019b      	lsls	r3, r3, #6
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	085b      	lsrs	r3, r3, #1
 800170a:	3b01      	subs	r3, #1
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	061b      	lsls	r3, r3, #24
 8001716:	491b      	ldr	r1, [pc, #108]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_RCC_OscConfig+0x478>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff fa91 	bl	8000c48 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172a:	f7ff fa8d 	bl	8000c48 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e05c      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x416>
 8001748:	e054      	b.n	80017f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_RCC_OscConfig+0x478>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fa7a 	bl	8000c48 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff fa76 	bl	8000c48 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e045      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x444>
 8001776:	e03d      	b.n	80017f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d107      	bne.n	8001790 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e038      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
 8001784:	40023800 	.word	0x40023800
 8001788:	40007000 	.word	0x40007000
 800178c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_RCC_OscConfig+0x4ec>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d028      	beq.n	80017f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d121      	bne.n	80017f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d11a      	bne.n	80017f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017c0:	4013      	ands	r3, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d111      	bne.n	80017f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	085b      	lsrs	r3, r3, #1
 80017d8:	3b01      	subs	r3, #1
 80017da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d107      	bne.n	80017f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800

08001804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0cc      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001818:	4b68      	ldr	r3, [pc, #416]	; (80019bc <HAL_RCC_ClockConfig+0x1b8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d90c      	bls.n	8001840 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b65      	ldr	r3, [pc, #404]	; (80019bc <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b63      	ldr	r3, [pc, #396]	; (80019bc <HAL_RCC_ClockConfig+0x1b8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0b8      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d020      	beq.n	800188e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001858:	4b59      	ldr	r3, [pc, #356]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	4a58      	ldr	r2, [pc, #352]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001862:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001870:	4b53      	ldr	r3, [pc, #332]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4a52      	ldr	r2, [pc, #328]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800187a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800187c:	4b50      	ldr	r3, [pc, #320]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	494d      	ldr	r1, [pc, #308]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d044      	beq.n	8001924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d107      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d119      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e07f      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d003      	beq.n	80018c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d107      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c2:	4b3f      	ldr	r3, [pc, #252]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d109      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e06f      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d2:	4b3b      	ldr	r3, [pc, #236]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e067      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e2:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f023 0203 	bic.w	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4934      	ldr	r1, [pc, #208]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f4:	f7ff f9a8 	bl	8000c48 <HAL_GetTick>
 80018f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fc:	f7ff f9a4 	bl	8000c48 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e04f      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001912:	4b2b      	ldr	r3, [pc, #172]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 020c 	and.w	r2, r3, #12
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	429a      	cmp	r2, r3
 8001922:	d1eb      	bne.n	80018fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001924:	4b25      	ldr	r3, [pc, #148]	; (80019bc <HAL_RCC_ClockConfig+0x1b8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d20c      	bcs.n	800194c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b22      	ldr	r3, [pc, #136]	; (80019bc <HAL_RCC_ClockConfig+0x1b8>)
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e032      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4916      	ldr	r1, [pc, #88]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	4313      	orrs	r3, r2
 8001968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d009      	beq.n	800198a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	490e      	ldr	r1, [pc, #56]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	4313      	orrs	r3, r2
 8001988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800198a:	f000 f821 	bl	80019d0 <HAL_RCC_GetSysClockFreq>
 800198e:	4602      	mov	r2, r0
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	490a      	ldr	r1, [pc, #40]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	5ccb      	ldrb	r3, [r1, r3]
 800199e:	fa22 f303 	lsr.w	r3, r2, r3
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff f908 	bl	8000bc0 <HAL_InitTick>

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023c00 	.word	0x40023c00
 80019c0:	40023800 	.word	0x40023800
 80019c4:	080034fc 	.word	0x080034fc
 80019c8:	20000010 	.word	0x20000010
 80019cc:	20000014 	.word	0x20000014

080019d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d4:	b090      	sub	sp, #64	; 0x40
 80019d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
 80019dc:	2300      	movs	r3, #0
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019e0:	2300      	movs	r3, #0
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019e8:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d00d      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x40>
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	f200 80a1 	bhi.w	8001b3c <HAL_RCC_GetSysClockFreq+0x16c>
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <HAL_RCC_GetSysClockFreq+0x34>
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d003      	beq.n	8001a0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a02:	e09b      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a04:	4b53      	ldr	r3, [pc, #332]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a06:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001a08:	e09b      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a0a:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a0e:	e098      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a10:	4b4f      	ldr	r3, [pc, #316]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a1a:	4b4d      	ldr	r3, [pc, #308]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d028      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a26:	4b4a      	ldr	r3, [pc, #296]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	099b      	lsrs	r3, r3, #6
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	623b      	str	r3, [r7, #32]
 8001a30:	627a      	str	r2, [r7, #36]	; 0x24
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a3c:	fb03 f201 	mul.w	r2, r3, r1
 8001a40:	2300      	movs	r3, #0
 8001a42:	fb00 f303 	mul.w	r3, r0, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	4a43      	ldr	r2, [pc, #268]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a4a:	fba0 1202 	umull	r1, r2, r0, r2
 8001a4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a50:	460a      	mov	r2, r1
 8001a52:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a56:	4413      	add	r3, r2
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	61fa      	str	r2, [r7, #28]
 8001a62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a6a:	f7fe fbb5 	bl	80001d8 <__aeabi_uldivmod>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4613      	mov	r3, r2
 8001a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a76:	e053      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a78:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	099b      	lsrs	r3, r3, #6
 8001a7e:	2200      	movs	r2, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	617a      	str	r2, [r7, #20]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a8a:	f04f 0b00 	mov.w	fp, #0
 8001a8e:	4652      	mov	r2, sl
 8001a90:	465b      	mov	r3, fp
 8001a92:	f04f 0000 	mov.w	r0, #0
 8001a96:	f04f 0100 	mov.w	r1, #0
 8001a9a:	0159      	lsls	r1, r3, #5
 8001a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa0:	0150      	lsls	r0, r2, #5
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	ebb2 080a 	subs.w	r8, r2, sl
 8001aaa:	eb63 090b 	sbc.w	r9, r3, fp
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001aba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001abe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ac2:	ebb2 0408 	subs.w	r4, r2, r8
 8001ac6:	eb63 0509 	sbc.w	r5, r3, r9
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	00eb      	lsls	r3, r5, #3
 8001ad4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ad8:	00e2      	lsls	r2, r4, #3
 8001ada:	4614      	mov	r4, r2
 8001adc:	461d      	mov	r5, r3
 8001ade:	eb14 030a 	adds.w	r3, r4, sl
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	eb45 030b 	adc.w	r3, r5, fp
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001af6:	4629      	mov	r1, r5
 8001af8:	028b      	lsls	r3, r1, #10
 8001afa:	4621      	mov	r1, r4
 8001afc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b00:	4621      	mov	r1, r4
 8001b02:	028a      	lsls	r2, r1, #10
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	60fa      	str	r2, [r7, #12]
 8001b10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b14:	f7fe fb60 	bl	80001d8 <__aeabi_uldivmod>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	0c1b      	lsrs	r3, r3, #16
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b3a:	e002      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3740      	adds	r7, #64	; 0x40
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	00f42400 	.word	0x00f42400
 8001b58:	017d7840 	.word	0x017d7840

08001b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000010 	.word	0x20000010

08001b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b78:	f7ff fff0 	bl	8001b5c <HAL_RCC_GetHCLKFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	0a9b      	lsrs	r3, r3, #10
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	4903      	ldr	r1, [pc, #12]	; (8001b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	0800350c 	.word	0x0800350c

08001b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ba0:	f7ff ffdc 	bl	8001b5c <HAL_RCC_GetHCLKFreq>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	0b5b      	lsrs	r3, r3, #13
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	4903      	ldr	r1, [pc, #12]	; (8001bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	0800350c 	.word	0x0800350c

08001bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e041      	b.n	8001c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7fe fecc 	bl	8000988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3304      	adds	r3, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4610      	mov	r0, r2
 8001c04:	f000 fa2e 	bl	8002064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d122      	bne.n	8001cbe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d11b      	bne.n	8001cbe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f06f 0202 	mvn.w	r2, #2
 8001c8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f9bf 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001caa:	e005      	b.n	8001cb8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f9b1 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f9c2 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d122      	bne.n	8001d12 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d11b      	bne.n	8001d12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f06f 0204 	mvn.w	r2, #4
 8001ce2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f995 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001cfe:	e005      	b.n	8001d0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f987 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f998 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d122      	bne.n	8001d66 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d11b      	bne.n	8001d66 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f06f 0208 	mvn.w	r2, #8
 8001d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2204      	movs	r2, #4
 8001d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f96b 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001d52:	e005      	b.n	8001d60 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f95d 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f96e 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b10      	cmp	r3, #16
 8001d72:	d122      	bne.n	8001dba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b10      	cmp	r3, #16
 8001d80:	d11b      	bne.n	8001dba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f06f 0210 	mvn.w	r2, #16
 8001d8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2208      	movs	r2, #8
 8001d90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f941 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001da6:	e005      	b.n	8001db4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f933 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f944 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d10e      	bne.n	8001de6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d107      	bne.n	8001de6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f06f 0201 	mvn.w	r2, #1
 8001dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f90d 	bl	8002000 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df0:	2b80      	cmp	r3, #128	; 0x80
 8001df2:	d10e      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	2b80      	cmp	r3, #128	; 0x80
 8001e00:	d107      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fabb 	bl	8002388 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1c:	2b40      	cmp	r3, #64	; 0x40
 8001e1e:	d10e      	bne.n	8001e3e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2a:	2b40      	cmp	r3, #64	; 0x40
 8001e2c:	d107      	bne.n	8001e3e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f909 	bl	8002050 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	d10e      	bne.n	8001e6a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	d107      	bne.n	8001e6a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f06f 0220 	mvn.w	r2, #32
 8001e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 fa85 	bl	8002374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_TIM_ConfigClockSource+0x1c>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e0b4      	b.n	8001ff8 <HAL_TIM_ConfigClockSource+0x186>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001eac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001eb4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec6:	d03e      	beq.n	8001f46 <HAL_TIM_ConfigClockSource+0xd4>
 8001ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ecc:	f200 8087 	bhi.w	8001fde <HAL_TIM_ConfigClockSource+0x16c>
 8001ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed4:	f000 8086 	beq.w	8001fe4 <HAL_TIM_ConfigClockSource+0x172>
 8001ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001edc:	d87f      	bhi.n	8001fde <HAL_TIM_ConfigClockSource+0x16c>
 8001ede:	2b70      	cmp	r3, #112	; 0x70
 8001ee0:	d01a      	beq.n	8001f18 <HAL_TIM_ConfigClockSource+0xa6>
 8001ee2:	2b70      	cmp	r3, #112	; 0x70
 8001ee4:	d87b      	bhi.n	8001fde <HAL_TIM_ConfigClockSource+0x16c>
 8001ee6:	2b60      	cmp	r3, #96	; 0x60
 8001ee8:	d050      	beq.n	8001f8c <HAL_TIM_ConfigClockSource+0x11a>
 8001eea:	2b60      	cmp	r3, #96	; 0x60
 8001eec:	d877      	bhi.n	8001fde <HAL_TIM_ConfigClockSource+0x16c>
 8001eee:	2b50      	cmp	r3, #80	; 0x50
 8001ef0:	d03c      	beq.n	8001f6c <HAL_TIM_ConfigClockSource+0xfa>
 8001ef2:	2b50      	cmp	r3, #80	; 0x50
 8001ef4:	d873      	bhi.n	8001fde <HAL_TIM_ConfigClockSource+0x16c>
 8001ef6:	2b40      	cmp	r3, #64	; 0x40
 8001ef8:	d058      	beq.n	8001fac <HAL_TIM_ConfigClockSource+0x13a>
 8001efa:	2b40      	cmp	r3, #64	; 0x40
 8001efc:	d86f      	bhi.n	8001fde <HAL_TIM_ConfigClockSource+0x16c>
 8001efe:	2b30      	cmp	r3, #48	; 0x30
 8001f00:	d064      	beq.n	8001fcc <HAL_TIM_ConfigClockSource+0x15a>
 8001f02:	2b30      	cmp	r3, #48	; 0x30
 8001f04:	d86b      	bhi.n	8001fde <HAL_TIM_ConfigClockSource+0x16c>
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	d060      	beq.n	8001fcc <HAL_TIM_ConfigClockSource+0x15a>
 8001f0a:	2b20      	cmp	r3, #32
 8001f0c:	d867      	bhi.n	8001fde <HAL_TIM_ConfigClockSource+0x16c>
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d05c      	beq.n	8001fcc <HAL_TIM_ConfigClockSource+0x15a>
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	d05a      	beq.n	8001fcc <HAL_TIM_ConfigClockSource+0x15a>
 8001f16:	e062      	b.n	8001fde <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	6899      	ldr	r1, [r3, #8]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f000 f996 	bl	8002258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f3a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	609a      	str	r2, [r3, #8]
      break;
 8001f44:	e04f      	b.n	8001fe6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	6899      	ldr	r1, [r3, #8]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f000 f97f 	bl	8002258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f68:	609a      	str	r2, [r3, #8]
      break;
 8001f6a:	e03c      	b.n	8001fe6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f000 f8f3 	bl	8002164 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2150      	movs	r1, #80	; 0x50
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 f94c 	bl	8002222 <TIM_ITRx_SetConfig>
      break;
 8001f8a:	e02c      	b.n	8001fe6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f000 f912 	bl	80021c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2160      	movs	r1, #96	; 0x60
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 f93c 	bl	8002222 <TIM_ITRx_SetConfig>
      break;
 8001faa:	e01c      	b.n	8001fe6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	6859      	ldr	r1, [r3, #4]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	f000 f8d3 	bl	8002164 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2140      	movs	r1, #64	; 0x40
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 f92c 	bl	8002222 <TIM_ITRx_SetConfig>
      break;
 8001fca:	e00c      	b.n	8001fe6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	f000 f923 	bl	8002222 <TIM_ITRx_SetConfig>
      break;
 8001fdc:	e003      	b.n	8001fe6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8001fe2:	e000      	b.n	8001fe6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001fe4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a34      	ldr	r2, [pc, #208]	; (8002148 <TIM_Base_SetConfig+0xe4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d00f      	beq.n	800209c <TIM_Base_SetConfig+0x38>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002082:	d00b      	beq.n	800209c <TIM_Base_SetConfig+0x38>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a31      	ldr	r2, [pc, #196]	; (800214c <TIM_Base_SetConfig+0xe8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d007      	beq.n	800209c <TIM_Base_SetConfig+0x38>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a30      	ldr	r2, [pc, #192]	; (8002150 <TIM_Base_SetConfig+0xec>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d003      	beq.n	800209c <TIM_Base_SetConfig+0x38>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a2f      	ldr	r2, [pc, #188]	; (8002154 <TIM_Base_SetConfig+0xf0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d108      	bne.n	80020ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a25      	ldr	r2, [pc, #148]	; (8002148 <TIM_Base_SetConfig+0xe4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d01b      	beq.n	80020ee <TIM_Base_SetConfig+0x8a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020bc:	d017      	beq.n	80020ee <TIM_Base_SetConfig+0x8a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a22      	ldr	r2, [pc, #136]	; (800214c <TIM_Base_SetConfig+0xe8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <TIM_Base_SetConfig+0x8a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a21      	ldr	r2, [pc, #132]	; (8002150 <TIM_Base_SetConfig+0xec>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00f      	beq.n	80020ee <TIM_Base_SetConfig+0x8a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a20      	ldr	r2, [pc, #128]	; (8002154 <TIM_Base_SetConfig+0xf0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00b      	beq.n	80020ee <TIM_Base_SetConfig+0x8a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <TIM_Base_SetConfig+0xf4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d007      	beq.n	80020ee <TIM_Base_SetConfig+0x8a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a1e      	ldr	r2, [pc, #120]	; (800215c <TIM_Base_SetConfig+0xf8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d003      	beq.n	80020ee <TIM_Base_SetConfig+0x8a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a1d      	ldr	r2, [pc, #116]	; (8002160 <TIM_Base_SetConfig+0xfc>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d108      	bne.n	8002100 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a08      	ldr	r2, [pc, #32]	; (8002148 <TIM_Base_SetConfig+0xe4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d103      	bne.n	8002134 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	615a      	str	r2, [r3, #20]
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40010000 	.word	0x40010000
 800214c:	40000400 	.word	0x40000400
 8002150:	40000800 	.word	0x40000800
 8002154:	40000c00 	.word	0x40000c00
 8002158:	40014000 	.word	0x40014000
 800215c:	40014400 	.word	0x40014400
 8002160:	40014800 	.word	0x40014800

08002164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	f023 0201 	bic.w	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800218e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f023 030a 	bic.w	r3, r3, #10
 80021a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	621a      	str	r2, [r3, #32]
}
 80021b6:	bf00      	nop
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b087      	sub	sp, #28
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	f023 0210 	bic.w	r2, r3, #16
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	031b      	lsls	r3, r3, #12
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	621a      	str	r2, [r3, #32]
}
 8002216:	bf00      	nop
 8002218:	371c      	adds	r7, #28
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002222:	b480      	push	{r7}
 8002224:	b085      	sub	sp, #20
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	f043 0307 	orr.w	r3, r3, #7
 8002244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	609a      	str	r2, [r3, #8]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	021a      	lsls	r2, r3, #8
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	431a      	orrs	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4313      	orrs	r3, r2
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	609a      	str	r2, [r3, #8]
}
 800228c:	bf00      	nop
 800228e:	371c      	adds	r7, #28
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e050      	b.n	8002352 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d018      	beq.n	8002326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fc:	d013      	beq.n	8002326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a18      	ldr	r2, [pc, #96]	; (8002364 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00e      	beq.n	8002326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a16      	ldr	r2, [pc, #88]	; (8002368 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d009      	beq.n	8002326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a15      	ldr	r2, [pc, #84]	; (800236c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d004      	beq.n	8002326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a13      	ldr	r2, [pc, #76]	; (8002370 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d10c      	bne.n	8002340 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800232c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	4313      	orrs	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40010000 	.word	0x40010000
 8002364:	40000400 	.word	0x40000400
 8002368:	40000800 	.word	0x40000800
 800236c:	40000c00 	.word	0x40000c00
 8002370:	40014000 	.word	0x40014000

08002374 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e03f      	b.n	800242e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7fe fb08 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2224      	movs	r2, #36	; 0x24
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fddf 	bl	8002fa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695a      	ldr	r2, [r3, #20]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002404:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002414:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b08a      	sub	sp, #40	; 0x28
 800243a:	af02      	add	r7, sp, #8
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	4613      	mov	r3, r2
 8002444:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b20      	cmp	r3, #32
 8002454:	d17c      	bne.n	8002550 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <HAL_UART_Transmit+0x2c>
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e075      	b.n	8002552 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_UART_Transmit+0x3e>
 8002470:	2302      	movs	r3, #2
 8002472:	e06e      	b.n	8002552 <HAL_UART_Transmit+0x11c>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2221      	movs	r2, #33	; 0x21
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800248a:	f7fe fbdd 	bl	8000c48 <HAL_GetTick>
 800248e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	88fa      	ldrh	r2, [r7, #6]
 8002494:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	88fa      	ldrh	r2, [r7, #6]
 800249a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a4:	d108      	bne.n	80024b8 <HAL_UART_Transmit+0x82>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d104      	bne.n	80024b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	e003      	b.n	80024c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024c8:	e02a      	b.n	8002520 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2200      	movs	r2, #0
 80024d2:	2180      	movs	r1, #128	; 0x80
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 fb1f 	bl	8002b18 <UART_WaitOnFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e036      	b.n	8002552 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10b      	bne.n	8002502 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	3302      	adds	r3, #2
 80024fe:	61bb      	str	r3, [r7, #24]
 8002500:	e007      	b.n	8002512 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	3301      	adds	r3, #1
 8002510:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1cf      	bne.n	80024ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2200      	movs	r2, #0
 8002532:	2140      	movs	r1, #64	; 0x40
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 faef 	bl	8002b18 <UART_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e006      	b.n	8002552 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	e000      	b.n	8002552 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002550:	2302      	movs	r3, #2
  }
}
 8002552:	4618      	mov	r0, r3
 8002554:	3720      	adds	r7, #32
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	4613      	mov	r3, r2
 8002566:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b20      	cmp	r3, #32
 8002572:	d11d      	bne.n	80025b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <HAL_UART_Receive_IT+0x26>
 800257a:	88fb      	ldrh	r3, [r7, #6]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e016      	b.n	80025b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_UART_Receive_IT+0x38>
 800258e:	2302      	movs	r3, #2
 8002590:	e00f      	b.n	80025b2 <HAL_UART_Receive_IT+0x58>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	461a      	mov	r2, r3
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fb24 	bl	8002bf4 <UART_Start_Receive_IT>
 80025ac:	4603      	mov	r3, r0
 80025ae:	e000      	b.n	80025b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
  }
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b0ba      	sub	sp, #232	; 0xe8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80025fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10f      	bne.n	8002622 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_UART_IRQHandler+0x66>
 800260e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fc07 	bl	8002e2e <UART_Receive_IT>
      return;
 8002620:	e256      	b.n	8002ad0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002622:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80de 	beq.w	80027e8 <HAL_UART_IRQHandler+0x22c>
 800262c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d106      	bne.n	8002646 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800263c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80d1 	beq.w	80027e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00b      	beq.n	800266a <HAL_UART_IRQHandler+0xae>
 8002652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f043 0201 	orr.w	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800266a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <HAL_UART_IRQHandler+0xd2>
 8002676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f043 0202 	orr.w	r2, r3, #2
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800268e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <HAL_UART_IRQHandler+0xf6>
 800269a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f043 0204 	orr.w	r2, r3, #4
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80026b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d011      	beq.n	80026e2 <HAL_UART_IRQHandler+0x126>
 80026be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80026ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f043 0208 	orr.w	r2, r3, #8
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 81ed 	beq.w	8002ac6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_UART_IRQHandler+0x14e>
 80026f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fb92 	bl	8002e2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002714:	2b40      	cmp	r3, #64	; 0x40
 8002716:	bf0c      	ite	eq
 8002718:	2301      	moveq	r3, #1
 800271a:	2300      	movne	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d103      	bne.n	8002736 <HAL_UART_IRQHandler+0x17a>
 800272e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002732:	2b00      	cmp	r3, #0
 8002734:	d04f      	beq.n	80027d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fa9a 	bl	8002c70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b40      	cmp	r3, #64	; 0x40
 8002748:	d141      	bne.n	80027ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3314      	adds	r3, #20
 8002750:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002754:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002758:	e853 3f00 	ldrex	r3, [r3]
 800275c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002760:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3314      	adds	r3, #20
 8002772:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002776:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800277a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002782:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002786:	e841 2300 	strex	r3, r2, [r1]
 800278a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800278e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1d9      	bne.n	800274a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	2b00      	cmp	r3, #0
 800279c:	d013      	beq.n	80027c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a2:	4a7d      	ldr	r2, [pc, #500]	; (8002998 <HAL_UART_IRQHandler+0x3dc>)
 80027a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fbd9 	bl	8000f62 <HAL_DMA_Abort_IT>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d016      	beq.n	80027e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027c0:	4610      	mov	r0, r2
 80027c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c4:	e00e      	b.n	80027e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f990 	bl	8002aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027cc:	e00a      	b.n	80027e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f98c 	bl	8002aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d4:	e006      	b.n	80027e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f988 	bl	8002aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80027e2:	e170      	b.n	8002ac6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e4:	bf00      	nop
    return;
 80027e6:	e16e      	b.n	8002ac6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	f040 814a 	bne.w	8002a86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8143 	beq.w	8002a86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 813c 	beq.w	8002a86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	f040 80b4 	bne.w	800299c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002840:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8140 	beq.w	8002aca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800284e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002852:	429a      	cmp	r2, r3
 8002854:	f080 8139 	bcs.w	8002aca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800285e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800286a:	f000 8088 	beq.w	800297e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	330c      	adds	r3, #12
 8002874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002878:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800287c:	e853 3f00 	ldrex	r3, [r3]
 8002880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002884:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800288c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	330c      	adds	r3, #12
 8002896:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800289a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800289e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80028a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028aa:	e841 2300 	strex	r3, r2, [r1]
 80028ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80028b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1d9      	bne.n	800286e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3314      	adds	r3, #20
 80028c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c4:	e853 3f00 	ldrex	r3, [r3]
 80028c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80028ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3314      	adds	r3, #20
 80028da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80028e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028ea:	e841 2300 	strex	r3, r2, [r1]
 80028ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1e1      	bne.n	80028ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	3314      	adds	r3, #20
 80028fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002900:	e853 3f00 	ldrex	r3, [r3]
 8002904:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800290c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	3314      	adds	r3, #20
 8002916:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800291a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800291c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002920:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002922:	e841 2300 	strex	r3, r2, [r1]
 8002926:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1e3      	bne.n	80028f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	330c      	adds	r3, #12
 8002942:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002946:	e853 3f00 	ldrex	r3, [r3]
 800294a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800294c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800294e:	f023 0310 	bic.w	r3, r3, #16
 8002952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	330c      	adds	r3, #12
 800295c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002960:	65ba      	str	r2, [r7, #88]	; 0x58
 8002962:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002964:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002966:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002968:	e841 2300 	strex	r3, r2, [r1]
 800296c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800296e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1e3      	bne.n	800293c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fa82 	bl	8000e82 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002986:	b29b      	uxth	r3, r3
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	b29b      	uxth	r3, r3
 800298c:	4619      	mov	r1, r3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f8b6 	bl	8002b00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002994:	e099      	b.n	8002aca <HAL_UART_IRQHandler+0x50e>
 8002996:	bf00      	nop
 8002998:	08002d37 	.word	0x08002d37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 808b 	beq.w	8002ace <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80029b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 8086 	beq.w	8002ace <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	330c      	adds	r3, #12
 80029c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029cc:	e853 3f00 	ldrex	r3, [r3]
 80029d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80029d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	330c      	adds	r3, #12
 80029e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029e6:	647a      	str	r2, [r7, #68]	; 0x44
 80029e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029ee:	e841 2300 	strex	r3, r2, [r1]
 80029f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1e3      	bne.n	80029c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	3314      	adds	r3, #20
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	e853 3f00 	ldrex	r3, [r3]
 8002a08:	623b      	str	r3, [r7, #32]
   return(result);
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3314      	adds	r3, #20
 8002a1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a1e:	633a      	str	r2, [r7, #48]	; 0x30
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a26:	e841 2300 	strex	r3, r2, [r1]
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1e3      	bne.n	80029fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	330c      	adds	r3, #12
 8002a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	e853 3f00 	ldrex	r3, [r3]
 8002a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0310 	bic.w	r3, r3, #16
 8002a56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	330c      	adds	r3, #12
 8002a60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a64:	61fa      	str	r2, [r7, #28]
 8002a66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a68:	69b9      	ldr	r1, [r7, #24]
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	e841 2300 	strex	r3, r2, [r1]
 8002a70:	617b      	str	r3, [r7, #20]
   return(result);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1e3      	bne.n	8002a40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f83e 	bl	8002b00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a84:	e023      	b.n	8002ace <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x4ea>
 8002a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f95d 	bl	8002d5e <UART_Transmit_IT>
    return;
 8002aa4:	e014      	b.n	8002ad0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00e      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x514>
 8002ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d008      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f99d 	bl	8002dfe <UART_EndTransmit_IT>
    return;
 8002ac4:	e004      	b.n	8002ad0 <HAL_UART_IRQHandler+0x514>
    return;
 8002ac6:	bf00      	nop
 8002ac8:	e002      	b.n	8002ad0 <HAL_UART_IRQHandler+0x514>
      return;
 8002aca:	bf00      	nop
 8002acc:	e000      	b.n	8002ad0 <HAL_UART_IRQHandler+0x514>
      return;
 8002ace:	bf00      	nop
  }
}
 8002ad0:	37e8      	adds	r7, #232	; 0xe8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop

08002ad8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b090      	sub	sp, #64	; 0x40
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	4613      	mov	r3, r2
 8002b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b28:	e050      	b.n	8002bcc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d04c      	beq.n	8002bcc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b38:	f7fe f886 	bl	8000c48 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d241      	bcs.n	8002bcc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	330c      	adds	r3, #12
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	e853 3f00 	ldrex	r3, [r3]
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	330c      	adds	r3, #12
 8002b66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b68:	637a      	str	r2, [r7, #52]	; 0x34
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b70:	e841 2300 	strex	r3, r2, [r1]
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e5      	bne.n	8002b48 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3314      	adds	r3, #20
 8002b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	e853 3f00 	ldrex	r3, [r3]
 8002b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3314      	adds	r3, #20
 8002b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b9c:	623a      	str	r2, [r7, #32]
 8002b9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba0:	69f9      	ldr	r1, [r7, #28]
 8002ba2:	6a3a      	ldr	r2, [r7, #32]
 8002ba4:	e841 2300 	strex	r3, r2, [r1]
 8002ba8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e5      	bne.n	8002b7c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e00f      	b.n	8002bec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d09f      	beq.n	8002b2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3740      	adds	r7, #64	; 0x40
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	88fa      	ldrh	r2, [r7, #6]
 8002c0c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	88fa      	ldrh	r2, [r7, #6]
 8002c12:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2222      	movs	r2, #34	; 0x22
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d007      	beq.n	8002c42 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c40:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
 8002c50:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0220 	orr.w	r2, r2, #32
 8002c60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b095      	sub	sp, #84	; 0x54
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	330c      	adds	r3, #12
 8002c7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c82:	e853 3f00 	ldrex	r3, [r3]
 8002c86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	330c      	adds	r3, #12
 8002c96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c98:	643a      	str	r2, [r7, #64]	; 0x40
 8002c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ca0:	e841 2300 	strex	r3, r2, [r1]
 8002ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e5      	bne.n	8002c78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3314      	adds	r3, #20
 8002cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	e853 3f00 	ldrex	r3, [r3]
 8002cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3314      	adds	r3, #20
 8002cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ccc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd4:	e841 2300 	strex	r3, r2, [r1]
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1e5      	bne.n	8002cac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d119      	bne.n	8002d1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	330c      	adds	r3, #12
 8002cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	e853 3f00 	ldrex	r3, [r3]
 8002cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f023 0310 	bic.w	r3, r3, #16
 8002cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	330c      	adds	r3, #12
 8002d06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d08:	61ba      	str	r2, [r7, #24]
 8002d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0c:	6979      	ldr	r1, [r7, #20]
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	e841 2300 	strex	r3, r2, [r1]
 8002d14:	613b      	str	r3, [r7, #16]
   return(result);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e5      	bne.n	8002ce8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d2a:	bf00      	nop
 8002d2c:	3754      	adds	r7, #84	; 0x54
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f7ff fecb 	bl	8002aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b085      	sub	sp, #20
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b21      	cmp	r3, #33	; 0x21
 8002d70:	d13e      	bne.n	8002df0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7a:	d114      	bne.n	8002da6 <UART_Transmit_IT+0x48>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d110      	bne.n	8002da6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	1c9a      	adds	r2, r3, #2
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	621a      	str	r2, [r3, #32]
 8002da4:	e008      	b.n	8002db8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	1c59      	adds	r1, r3, #1
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6211      	str	r1, [r2, #32]
 8002db0:	781a      	ldrb	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10f      	bne.n	8002dec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e000      	b.n	8002df2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002df0:	2302      	movs	r3, #2
  }
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff fe5a 	bl	8002ad8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b08c      	sub	sp, #48	; 0x30
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b22      	cmp	r3, #34	; 0x22
 8002e40:	f040 80ab 	bne.w	8002f9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4c:	d117      	bne.n	8002e7e <UART_Receive_IT+0x50>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d113      	bne.n	8002e7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e76:	1c9a      	adds	r2, r3, #2
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e7c:	e026      	b.n	8002ecc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e90:	d007      	beq.n	8002ea2 <UART_Receive_IT+0x74>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10a      	bne.n	8002eb0 <UART_Receive_IT+0x82>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e008      	b.n	8002ec2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	4619      	mov	r1, r3
 8002eda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d15a      	bne.n	8002f96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0220 	bic.w	r2, r2, #32
 8002eee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d135      	bne.n	8002f8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	330c      	adds	r3, #12
 8002f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	e853 3f00 	ldrex	r3, [r3]
 8002f34:	613b      	str	r3, [r7, #16]
   return(result);
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f023 0310 	bic.w	r3, r3, #16
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	330c      	adds	r3, #12
 8002f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f46:	623a      	str	r2, [r7, #32]
 8002f48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4a:	69f9      	ldr	r1, [r7, #28]
 8002f4c:	6a3a      	ldr	r2, [r7, #32]
 8002f4e:	e841 2300 	strex	r3, r2, [r1]
 8002f52:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1e5      	bne.n	8002f26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	d10a      	bne.n	8002f7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f82:	4619      	mov	r1, r3
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff fdbb 	bl	8002b00 <HAL_UARTEx_RxEventCallback>
 8002f8a:	e002      	b.n	8002f92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7fd faeb 	bl	8000568 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e002      	b.n	8002f9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e000      	b.n	8002f9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002f9a:	2302      	movs	r3, #2
  }
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3730      	adds	r7, #48	; 0x30
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa8:	b0c0      	sub	sp, #256	; 0x100
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc0:	68d9      	ldr	r1, [r3, #12]
 8002fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	ea40 0301 	orr.w	r3, r0, r1
 8002fcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ffc:	f021 010c 	bic.w	r1, r1, #12
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800300a:	430b      	orrs	r3, r1
 800300c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800300e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800301a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301e:	6999      	ldr	r1, [r3, #24]
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	ea40 0301 	orr.w	r3, r0, r1
 800302a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4b8f      	ldr	r3, [pc, #572]	; (8003270 <UART_SetConfig+0x2cc>)
 8003034:	429a      	cmp	r2, r3
 8003036:	d005      	beq.n	8003044 <UART_SetConfig+0xa0>
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4b8d      	ldr	r3, [pc, #564]	; (8003274 <UART_SetConfig+0x2d0>)
 8003040:	429a      	cmp	r2, r3
 8003042:	d104      	bne.n	800304e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003044:	f7fe fdaa 	bl	8001b9c <HAL_RCC_GetPCLK2Freq>
 8003048:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800304c:	e003      	b.n	8003056 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800304e:	f7fe fd91 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 8003052:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003060:	f040 810c 	bne.w	800327c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003068:	2200      	movs	r2, #0
 800306a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800306e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003072:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003076:	4622      	mov	r2, r4
 8003078:	462b      	mov	r3, r5
 800307a:	1891      	adds	r1, r2, r2
 800307c:	65b9      	str	r1, [r7, #88]	; 0x58
 800307e:	415b      	adcs	r3, r3
 8003080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003082:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003086:	4621      	mov	r1, r4
 8003088:	eb12 0801 	adds.w	r8, r2, r1
 800308c:	4629      	mov	r1, r5
 800308e:	eb43 0901 	adc.w	r9, r3, r1
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800309e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030a6:	4690      	mov	r8, r2
 80030a8:	4699      	mov	r9, r3
 80030aa:	4623      	mov	r3, r4
 80030ac:	eb18 0303 	adds.w	r3, r8, r3
 80030b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030b4:	462b      	mov	r3, r5
 80030b6:	eb49 0303 	adc.w	r3, r9, r3
 80030ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030d2:	460b      	mov	r3, r1
 80030d4:	18db      	adds	r3, r3, r3
 80030d6:	653b      	str	r3, [r7, #80]	; 0x50
 80030d8:	4613      	mov	r3, r2
 80030da:	eb42 0303 	adc.w	r3, r2, r3
 80030de:	657b      	str	r3, [r7, #84]	; 0x54
 80030e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030e8:	f7fd f876 	bl	80001d8 <__aeabi_uldivmod>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4b61      	ldr	r3, [pc, #388]	; (8003278 <UART_SetConfig+0x2d4>)
 80030f2:	fba3 2302 	umull	r2, r3, r3, r2
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	011c      	lsls	r4, r3, #4
 80030fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030fe:	2200      	movs	r2, #0
 8003100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003104:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003108:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800310c:	4642      	mov	r2, r8
 800310e:	464b      	mov	r3, r9
 8003110:	1891      	adds	r1, r2, r2
 8003112:	64b9      	str	r1, [r7, #72]	; 0x48
 8003114:	415b      	adcs	r3, r3
 8003116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003118:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800311c:	4641      	mov	r1, r8
 800311e:	eb12 0a01 	adds.w	sl, r2, r1
 8003122:	4649      	mov	r1, r9
 8003124:	eb43 0b01 	adc.w	fp, r3, r1
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003134:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800313c:	4692      	mov	sl, r2
 800313e:	469b      	mov	fp, r3
 8003140:	4643      	mov	r3, r8
 8003142:	eb1a 0303 	adds.w	r3, sl, r3
 8003146:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800314a:	464b      	mov	r3, r9
 800314c:	eb4b 0303 	adc.w	r3, fp, r3
 8003150:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003160:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003164:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003168:	460b      	mov	r3, r1
 800316a:	18db      	adds	r3, r3, r3
 800316c:	643b      	str	r3, [r7, #64]	; 0x40
 800316e:	4613      	mov	r3, r2
 8003170:	eb42 0303 	adc.w	r3, r2, r3
 8003174:	647b      	str	r3, [r7, #68]	; 0x44
 8003176:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800317a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800317e:	f7fd f82b 	bl	80001d8 <__aeabi_uldivmod>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4611      	mov	r1, r2
 8003188:	4b3b      	ldr	r3, [pc, #236]	; (8003278 <UART_SetConfig+0x2d4>)
 800318a:	fba3 2301 	umull	r2, r3, r3, r1
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2264      	movs	r2, #100	; 0x64
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	1acb      	subs	r3, r1, r3
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800319e:	4b36      	ldr	r3, [pc, #216]	; (8003278 <UART_SetConfig+0x2d4>)
 80031a0:	fba3 2302 	umull	r2, r3, r3, r2
 80031a4:	095b      	lsrs	r3, r3, #5
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031ac:	441c      	add	r4, r3
 80031ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031b2:	2200      	movs	r2, #0
 80031b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80031bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80031c0:	4642      	mov	r2, r8
 80031c2:	464b      	mov	r3, r9
 80031c4:	1891      	adds	r1, r2, r2
 80031c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80031c8:	415b      	adcs	r3, r3
 80031ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031d0:	4641      	mov	r1, r8
 80031d2:	1851      	adds	r1, r2, r1
 80031d4:	6339      	str	r1, [r7, #48]	; 0x30
 80031d6:	4649      	mov	r1, r9
 80031d8:	414b      	adcs	r3, r1
 80031da:	637b      	str	r3, [r7, #52]	; 0x34
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031e8:	4659      	mov	r1, fp
 80031ea:	00cb      	lsls	r3, r1, #3
 80031ec:	4651      	mov	r1, sl
 80031ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031f2:	4651      	mov	r1, sl
 80031f4:	00ca      	lsls	r2, r1, #3
 80031f6:	4610      	mov	r0, r2
 80031f8:	4619      	mov	r1, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	4642      	mov	r2, r8
 80031fe:	189b      	adds	r3, r3, r2
 8003200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003204:	464b      	mov	r3, r9
 8003206:	460a      	mov	r2, r1
 8003208:	eb42 0303 	adc.w	r3, r2, r3
 800320c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800321c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003220:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003224:	460b      	mov	r3, r1
 8003226:	18db      	adds	r3, r3, r3
 8003228:	62bb      	str	r3, [r7, #40]	; 0x28
 800322a:	4613      	mov	r3, r2
 800322c:	eb42 0303 	adc.w	r3, r2, r3
 8003230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003232:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003236:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800323a:	f7fc ffcd 	bl	80001d8 <__aeabi_uldivmod>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <UART_SetConfig+0x2d4>)
 8003244:	fba3 1302 	umull	r1, r3, r3, r2
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	2164      	movs	r1, #100	; 0x64
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	3332      	adds	r3, #50	; 0x32
 8003256:	4a08      	ldr	r2, [pc, #32]	; (8003278 <UART_SetConfig+0x2d4>)
 8003258:	fba2 2303 	umull	r2, r3, r2, r3
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	f003 0207 	and.w	r2, r3, #7
 8003262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4422      	add	r2, r4
 800326a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800326c:	e105      	b.n	800347a <UART_SetConfig+0x4d6>
 800326e:	bf00      	nop
 8003270:	40011000 	.word	0x40011000
 8003274:	40011400 	.word	0x40011400
 8003278:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800327c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003280:	2200      	movs	r2, #0
 8003282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003286:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800328a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800328e:	4642      	mov	r2, r8
 8003290:	464b      	mov	r3, r9
 8003292:	1891      	adds	r1, r2, r2
 8003294:	6239      	str	r1, [r7, #32]
 8003296:	415b      	adcs	r3, r3
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
 800329a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800329e:	4641      	mov	r1, r8
 80032a0:	1854      	adds	r4, r2, r1
 80032a2:	4649      	mov	r1, r9
 80032a4:	eb43 0501 	adc.w	r5, r3, r1
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	00eb      	lsls	r3, r5, #3
 80032b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032b6:	00e2      	lsls	r2, r4, #3
 80032b8:	4614      	mov	r4, r2
 80032ba:	461d      	mov	r5, r3
 80032bc:	4643      	mov	r3, r8
 80032be:	18e3      	adds	r3, r4, r3
 80032c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032c4:	464b      	mov	r3, r9
 80032c6:	eb45 0303 	adc.w	r3, r5, r3
 80032ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032ea:	4629      	mov	r1, r5
 80032ec:	008b      	lsls	r3, r1, #2
 80032ee:	4621      	mov	r1, r4
 80032f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032f4:	4621      	mov	r1, r4
 80032f6:	008a      	lsls	r2, r1, #2
 80032f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032fc:	f7fc ff6c 	bl	80001d8 <__aeabi_uldivmod>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4b60      	ldr	r3, [pc, #384]	; (8003488 <UART_SetConfig+0x4e4>)
 8003306:	fba3 2302 	umull	r2, r3, r3, r2
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	011c      	lsls	r4, r3, #4
 800330e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003312:	2200      	movs	r2, #0
 8003314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003318:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800331c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003320:	4642      	mov	r2, r8
 8003322:	464b      	mov	r3, r9
 8003324:	1891      	adds	r1, r2, r2
 8003326:	61b9      	str	r1, [r7, #24]
 8003328:	415b      	adcs	r3, r3
 800332a:	61fb      	str	r3, [r7, #28]
 800332c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003330:	4641      	mov	r1, r8
 8003332:	1851      	adds	r1, r2, r1
 8003334:	6139      	str	r1, [r7, #16]
 8003336:	4649      	mov	r1, r9
 8003338:	414b      	adcs	r3, r1
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003348:	4659      	mov	r1, fp
 800334a:	00cb      	lsls	r3, r1, #3
 800334c:	4651      	mov	r1, sl
 800334e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003352:	4651      	mov	r1, sl
 8003354:	00ca      	lsls	r2, r1, #3
 8003356:	4610      	mov	r0, r2
 8003358:	4619      	mov	r1, r3
 800335a:	4603      	mov	r3, r0
 800335c:	4642      	mov	r2, r8
 800335e:	189b      	adds	r3, r3, r2
 8003360:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003364:	464b      	mov	r3, r9
 8003366:	460a      	mov	r2, r1
 8003368:	eb42 0303 	adc.w	r3, r2, r3
 800336c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	67bb      	str	r3, [r7, #120]	; 0x78
 800337a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003388:	4649      	mov	r1, r9
 800338a:	008b      	lsls	r3, r1, #2
 800338c:	4641      	mov	r1, r8
 800338e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003392:	4641      	mov	r1, r8
 8003394:	008a      	lsls	r2, r1, #2
 8003396:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800339a:	f7fc ff1d 	bl	80001d8 <__aeabi_uldivmod>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4b39      	ldr	r3, [pc, #228]	; (8003488 <UART_SetConfig+0x4e4>)
 80033a4:	fba3 1302 	umull	r1, r3, r3, r2
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	2164      	movs	r1, #100	; 0x64
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	3332      	adds	r3, #50	; 0x32
 80033b6:	4a34      	ldr	r2, [pc, #208]	; (8003488 <UART_SetConfig+0x4e4>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033c2:	441c      	add	r4, r3
 80033c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033c8:	2200      	movs	r2, #0
 80033ca:	673b      	str	r3, [r7, #112]	; 0x70
 80033cc:	677a      	str	r2, [r7, #116]	; 0x74
 80033ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033d2:	4642      	mov	r2, r8
 80033d4:	464b      	mov	r3, r9
 80033d6:	1891      	adds	r1, r2, r2
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	415b      	adcs	r3, r3
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033e2:	4641      	mov	r1, r8
 80033e4:	1851      	adds	r1, r2, r1
 80033e6:	6039      	str	r1, [r7, #0]
 80033e8:	4649      	mov	r1, r9
 80033ea:	414b      	adcs	r3, r1
 80033ec:	607b      	str	r3, [r7, #4]
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033fa:	4659      	mov	r1, fp
 80033fc:	00cb      	lsls	r3, r1, #3
 80033fe:	4651      	mov	r1, sl
 8003400:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003404:	4651      	mov	r1, sl
 8003406:	00ca      	lsls	r2, r1, #3
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	4603      	mov	r3, r0
 800340e:	4642      	mov	r2, r8
 8003410:	189b      	adds	r3, r3, r2
 8003412:	66bb      	str	r3, [r7, #104]	; 0x68
 8003414:	464b      	mov	r3, r9
 8003416:	460a      	mov	r2, r1
 8003418:	eb42 0303 	adc.w	r3, r2, r3
 800341c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	663b      	str	r3, [r7, #96]	; 0x60
 8003428:	667a      	str	r2, [r7, #100]	; 0x64
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003436:	4649      	mov	r1, r9
 8003438:	008b      	lsls	r3, r1, #2
 800343a:	4641      	mov	r1, r8
 800343c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003440:	4641      	mov	r1, r8
 8003442:	008a      	lsls	r2, r1, #2
 8003444:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003448:	f7fc fec6 	bl	80001d8 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <UART_SetConfig+0x4e4>)
 8003452:	fba3 1302 	umull	r1, r3, r3, r2
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2164      	movs	r1, #100	; 0x64
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	3332      	adds	r3, #50	; 0x32
 8003464:	4a08      	ldr	r2, [pc, #32]	; (8003488 <UART_SetConfig+0x4e4>)
 8003466:	fba2 2303 	umull	r2, r3, r2, r3
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	f003 020f 	and.w	r2, r3, #15
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4422      	add	r2, r4
 8003478:	609a      	str	r2, [r3, #8]
}
 800347a:	bf00      	nop
 800347c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003480:	46bd      	mov	sp, r7
 8003482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003486:	bf00      	nop
 8003488:	51eb851f 	.word	0x51eb851f

0800348c <__libc_init_array>:
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	4d0d      	ldr	r5, [pc, #52]	; (80034c4 <__libc_init_array+0x38>)
 8003490:	4c0d      	ldr	r4, [pc, #52]	; (80034c8 <__libc_init_array+0x3c>)
 8003492:	1b64      	subs	r4, r4, r5
 8003494:	10a4      	asrs	r4, r4, #2
 8003496:	2600      	movs	r6, #0
 8003498:	42a6      	cmp	r6, r4
 800349a:	d109      	bne.n	80034b0 <__libc_init_array+0x24>
 800349c:	4d0b      	ldr	r5, [pc, #44]	; (80034cc <__libc_init_array+0x40>)
 800349e:	4c0c      	ldr	r4, [pc, #48]	; (80034d0 <__libc_init_array+0x44>)
 80034a0:	f000 f820 	bl	80034e4 <_init>
 80034a4:	1b64      	subs	r4, r4, r5
 80034a6:	10a4      	asrs	r4, r4, #2
 80034a8:	2600      	movs	r6, #0
 80034aa:	42a6      	cmp	r6, r4
 80034ac:	d105      	bne.n	80034ba <__libc_init_array+0x2e>
 80034ae:	bd70      	pop	{r4, r5, r6, pc}
 80034b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b4:	4798      	blx	r3
 80034b6:	3601      	adds	r6, #1
 80034b8:	e7ee      	b.n	8003498 <__libc_init_array+0xc>
 80034ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80034be:	4798      	blx	r3
 80034c0:	3601      	adds	r6, #1
 80034c2:	e7f2      	b.n	80034aa <__libc_init_array+0x1e>
 80034c4:	0800351c 	.word	0x0800351c
 80034c8:	0800351c 	.word	0x0800351c
 80034cc:	0800351c 	.word	0x0800351c
 80034d0:	08003520 	.word	0x08003520

080034d4 <memset>:
 80034d4:	4402      	add	r2, r0
 80034d6:	4603      	mov	r3, r0
 80034d8:	4293      	cmp	r3, r2
 80034da:	d100      	bne.n	80034de <memset+0xa>
 80034dc:	4770      	bx	lr
 80034de:	f803 1b01 	strb.w	r1, [r3], #1
 80034e2:	e7f9      	b.n	80034d8 <memset+0x4>

080034e4 <_init>:
 80034e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e6:	bf00      	nop
 80034e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ea:	bc08      	pop	{r3}
 80034ec:	469e      	mov	lr, r3
 80034ee:	4770      	bx	lr

080034f0 <_fini>:
 80034f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f2:	bf00      	nop
 80034f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f6:	bc08      	pop	{r3}
 80034f8:	469e      	mov	lr, r3
 80034fa:	4770      	bx	lr
